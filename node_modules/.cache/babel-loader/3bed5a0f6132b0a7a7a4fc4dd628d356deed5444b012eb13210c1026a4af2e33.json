{"ast":null,"code":"import Connection from \"./Connection\";\nfunction ApiService(path, formData, responseCallback) {\n  let method = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"GET\";\n  let connection = Connection();\n  if (path.startsWith('https')) {\n    connection = path;\n  }\n  if (method === 'GET') {\n    fetch(connection + path, {\n      method: method,\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8',\n        'X-Api-Key': 'bb32c96502a24cafb4fc9e33851be330'\n      }\n    }).then(response => response.json()).then(data => {\n      responseCallback(data);\n    }).catch(error => {\n      console.log(error.message);\n    });\n  } else {\n    fetch(connection + path, {\n      method: method,\n      body: JSON.stringify(formData),\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8'\n      }\n    }).then(response => response.json()).then(data => {\n      responseCallback(data);\n    }).catch(error => {\n      console.log(error.message);\n    });\n  }\n}\n_c = ApiService;\nexport default ApiService;\nvar _c;\n$RefreshReg$(_c, \"ApiService\");","map":{"version":3,"names":["Connection","ApiService","path","formData","responseCallback","method","arguments","length","undefined","connection","startsWith","fetch","headers","then","response","json","data","catch","error","console","log","message","body","JSON","stringify","_c","$RefreshReg$"],"sources":["D:/Kodego Projects/miniproject2/src/ApiService.js"],"sourcesContent":["import Connection from \"./Connection\";\r\n\r\nfunction ApiService(path, formData, responseCallback, method=\"GET\"){\r\n\r\n    let connection = Connection();\r\n\r\n    if(path.startsWith('https')){\r\n        connection = path;\r\n    }\r\n\r\n\r\n    if(method === 'GET'){\r\n        fetch(connection + path, {\r\n            method: method,\r\n            headers:{'Content-type':'application/json; charset=UTF-8','X-Api-Key':'bb32c96502a24cafb4fc9e33851be330'},\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            responseCallback(data);\r\n        })\r\n        .catch((error) =>{\r\n            console.log(error.message);\r\n        });\r\n    }else{\r\n        fetch(connection + path, {\r\n            method: method,\r\n            body: JSON.stringify(formData),\r\n            headers:{'Content-type':'application/json; charset=UTF-8',},\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            responseCallback(data);\r\n        })\r\n        .catch((error) =>{\r\n            console.log(error.message);\r\n        });\r\n    }\r\n    \r\n\r\n}\r\n\r\nexport default ApiService;"],"mappings":"AAAA,OAAOA,UAAU,MAAM,cAAc;AAErC,SAASC,UAAUA,CAACC,IAAI,EAAEC,QAAQ,EAAEC,gBAAgB,EAAe;EAAA,IAAbC,MAAM,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAC,KAAK;EAE9D,IAAIG,UAAU,GAAGT,UAAU,CAAC,CAAC;EAE7B,IAAGE,IAAI,CAACQ,UAAU,CAAC,OAAO,CAAC,EAAC;IACxBD,UAAU,GAAGP,IAAI;EACrB;EAGA,IAAGG,MAAM,KAAK,KAAK,EAAC;IAChBM,KAAK,CAACF,UAAU,GAAGP,IAAI,EAAE;MACrBG,MAAM,EAAEA,MAAM;MACdO,OAAO,EAAC;QAAC,cAAc,EAAC,iCAAiC;QAAC,WAAW,EAAC;MAAkC;IAC5G,CAAC,CAAC,CACDC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;MACVZ,gBAAgB,CAACY,IAAI,CAAC;IAC1B,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAI;MACbC,OAAO,CAACC,GAAG,CAACF,KAAK,CAACG,OAAO,CAAC;IAC9B,CAAC,CAAC;EACN,CAAC,MAAI;IACDV,KAAK,CAACF,UAAU,GAAGP,IAAI,EAAE;MACrBG,MAAM,EAAEA,MAAM;MACdiB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACrB,QAAQ,CAAC;MAC9BS,OAAO,EAAC;QAAC,cAAc,EAAC;MAAkC;IAC9D,CAAC,CAAC,CACDC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;MACVZ,gBAAgB,CAACY,IAAI,CAAC;IAC1B,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAI;MACbC,OAAO,CAACC,GAAG,CAACF,KAAK,CAACG,OAAO,CAAC;IAC9B,CAAC,CAAC;EACN;AAGJ;AAACI,EAAA,GArCQxB,UAAU;AAuCnB,eAAeA,UAAU;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}